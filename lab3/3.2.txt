#include <bits/stdc++.h>
using namespace std;
const bool rakNaGoreNeSwistnet=true;
class Nomenclature {
private:
    string name;
    double wholesalePrice;
    double retailMarkup;
    int quantity;

public:
    Nomenclature(const string& n = "", double wPrice = 0.0, double rMarkup = 0.0, int q = 0)
            : name(n), wholesalePrice(wPrice), retailMarkup(rMarkup), quantity(q) {}

    double calculateProfit() const {
        double retailPrice = wholesalePrice * (1 + retailMarkup);
        return retailPrice * quantity - wholesalePrice * quantity;
    }

    void display() const {
        cout<<"Name: "<<name<<endl;
        cout<<"Wholesale Price: "<<wholesalePrice<<endl;
        cout<<"Retail Markup: "<<retailMarkup<<endl;
        cout<<"Quantity: "<<quantity<<endl;
        cout<<"Potential Profit: "<<calculateProfit()<<endl;
    }

    void input() {
        cout<<"Enter name: ";
        cin>>name;
        cout<<"Enter wholesale price: ";
        cin>>wholesalePrice;
        cout<<"Enter retail markup: ";
        cin>>retailMarkup;
        cout<<"Enter quantity: ";
        cin>>quantity;
    }
};

int main() {
    vector<Nomenclature> store;

    while (rakNaGoreNeSwistnet) {
        cout<<"Choose operation:"<<endl;
        cout<<"1. Add item"<<endl;
        cout<<"2. Remove item"<<endl;
        cout<<"3. Display all items"<<endl;
        cout<<"4. Exit"<<endl;

        int choice;
        cin>>choice;

        switch (choice) {
            case 1: {
                Nomenclature item;
                item.input();
                store.push_back(item);
                break;
            }
            case 2: {
                if (!store.empty()) {
                    cout<<"Enter index of item to remove: ";
                    int index;
                    cin>>index;
                    index--;
                    if (index >= 0 && index < store.size()) {
                        store.erase(store.begin() + index);
                        cout<<"Item removed successfully."<<endl;
                    } else {
                        cout<<"Invalid index."<<endl;
                    }
                } else {
                    cout<<"Store is empty."<<endl;
                }
                break;
            }
            case 3: {
                if (!store.empty()) {
                    for (size_t i = 0; i < store.size(); ++i) {
                        cout<<"Item "<<i+1<<":"<<endl;
                        store[i].display();
                        cout<<endl;
                    }
                } else {
                    cout<<"Store is empty."<<endl;
                }
                break;
            }
            case 4:
                cout<<"Exiting program."<<endl;
                return 0;
            default:
                cout<<"Invalid choice. Try again."<<endl;
        }
    }
}
