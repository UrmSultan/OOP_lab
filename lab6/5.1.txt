#include <iostream>
#include <limits>

using namespace std;

class Int {
private:
    int value;

public:
    Int(int val = 0) : value(val) {}

    // Overloaded arithmetic operators
    Int operator+(const Int& other) const {
        if ((long double)value + other.value > numeric_limits<int>::max() ||
            (long double)value + other.value < numeric_limits<int>::min()) {
            throw overflow_error("Overflow detected in addition");
        }
        return Int(value + other.value);
    }

    Int operator-(const Int& other) const {
        if ((long double)value - other.value > numeric_limits<int>::max() ||
            (long double)value - other.value < numeric_limits<int>::min()) {
            throw overflow_error("Overflow detected in subtraction");
        }
        return Int(value - other.value);
    }

    Int operator*(const Int& other) const {
        if ((long double)value * other.value > numeric_limits<int>::max() ||
            (long double)value * other.value < numeric_limits<int>::min()) {
            throw overflow_error("Overflow detected in multiplication");
        }
        return Int(value * other.value);
    }

    Int operator/(const Int& other) const {
        if (other.value == 0) {
            throw invalid_argument("Division by zero");
        }
        return Int(value / other.value);
    }

    // Prefix increment operator
    Int& operator++() {
        if (value == numeric_limits<int>::max()) {
            throw overflow_error("Overflow detected in prefix increment");
        }
        ++value;
        return *this;
    }

    // Postfix increment operator
    Int operator++(int) {
        if (value == numeric_limits<int>::max()) {
            throw overflow_error("Overflow detected in postfix increment");
        }
        Int temp(*this);
        ++value;
        return temp;
    }

    // Output operator
    friend ostream& operator<<(ostream& os, const Int& obj) {
        return os << obj.value;
    }

    // Input operator
    friend istream& operator>>(istream& is, Int& obj) {
        return is >> obj.value;
    }
};

int main() {
    Int a, b;
    cout<<"max value of int = 2147483647"<<endl;
    cout << "Enter the first integer: ";
    cin >> a;

    cout << "Enter the second integer: ";
    cin >> b;

    try {
        Int c = a + b;
        cout << "Result of addition: " << c << endl;
    } catch (const exception& e) {
        cerr << "Exception caught: " << e.what() << endl;
    }

    try {
        Int d = a - b;
        cout << "Result of subtraction: " << d << endl;
    } catch (const exception& e) {
        cerr << "Exception caught: " << e.what() << endl;
    }

    try {
        Int e = a * b;
        cout << "Result of multiplication: " << e << endl;
    } catch (const exception& e) {
        cerr << "Exception caught: " << e.what() << endl;
    }

    try {
        Int f = a / b;
        cout << "Result of division: " << f << endl;
    } catch (const exception& e) {
        cerr << "Exception caught: " << e.what() << endl;
    }

    try {
        Int g = ++a;
        cout << "Result of prefix increment: " << g << endl;
    } catch (const exception& e) {
        cerr << "Exception caught: " << e.what() << endl;
    }

    try {
        Int h = b++;
        cout << "Result of postfix increment: " << h << endl;
    } catch (const exception& e) {
        cerr << "Exception caught: " << e.what() << endl;
    }

    return 0;
}
